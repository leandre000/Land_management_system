services:
  db:
    image: postgis/postgis:16-3.4
    container_name: postgis
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: land_management
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  nestjs:
    build:
      context: .
      target: development
    container_name: nestjs
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
      DB_HOST: db
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: land_management
      JWT_SECRET: super-secret
      JWT_EXPIRES_IN: 1d
      RABBITMQ_URL: amqp://rabbitmq:5672
      REDIS_HOST: redis
      REDIS_PORT: 6379
    command: npm run start:dev

  # Other services remain unchanged...
  redis:
    image: redis
    container_name: redis
    restart: always
    ports:
      - "6380:6379"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"

  geoserver:
    image: kartoza/geoserver
    container_name: geoserver
    restart: always
    ports:
      - "8082:8080"
    environment:
      GEOSERVER_ADMIN_USER: admin
      GEOSERVER_ADMIN_PASSWORD: geoserver
    volumes:
      - ./geoserver_data:/opt/geoserver_data

  adminer:
    image: adminer
    restart: always
    ports:
      - "8081:8080"

volumes:
  postgres_data: